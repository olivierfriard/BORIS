# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'core.ui'
##
## Created by: Qt User Interface Compiler version 6.9.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QDockWidget, QHBoxLayout,
    QHeaderView, QLabel, QMainWindow, QMenu,
    QMenuBar, QPushButton, QSizePolicy, QSpacerItem,
    QSplitter, QStatusBar, QTableView, QTableWidget,
    QTableWidgetItem, QToolBar, QVBoxLayout, QWidget)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1509, 813)
        MainWindow.setDockOptions(QMainWindow.DockOption.AllowNestedDocks|QMainWindow.DockOption.AllowTabbedDocks|QMainWindow.DockOption.AnimatedDocks)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.actionDocumentation = QAction(MainWindow)
        self.actionDocumentation.setObjectName(u"actionDocumentation")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setObjectName(u"actionQuit")
        self.actionPause = QAction(MainWindow)
        self.actionPause.setObjectName(u"actionPause")
        self.actionPlay = QAction(MainWindow)
        self.actionPlay.setObjectName(u"actionPlay")
        self.actionOpen_video_file = QAction(MainWindow)
        self.actionOpen_video_file.setObjectName(u"actionOpen_video_file")
        self.actionReset = QAction(MainWindow)
        self.actionReset.setObjectName(u"actionReset")
        self.actionFaster = QAction(MainWindow)
        self.actionFaster.setObjectName(u"actionFaster")
        self.actionFaster.setEnabled(True)
        self.actionSlower = QAction(MainWindow)
        self.actionSlower.setObjectName(u"actionSlower")
        self.actionSlower.setEnabled(True)
        self.actionJumpForward = QAction(MainWindow)
        self.actionJumpForward.setObjectName(u"actionJumpForward")
        self.actionLoad_configuration = QAction(MainWindow)
        self.actionLoad_configuration.setObjectName(u"actionLoad_configuration")
        self.actionDelete_selected_events = QAction(MainWindow)
        self.actionDelete_selected_events.setObjectName(u"actionDelete_selected_events")
        self.actionDelete_all_events = QAction(MainWindow)
        self.actionDelete_all_events.setObjectName(u"actionDelete_all_events")
        self.actionSort_observations = QAction(MainWindow)
        self.actionSort_observations.setObjectName(u"actionSort_observations")
        self.actionLoad_observations_file = QAction(MainWindow)
        self.actionLoad_observations_file.setObjectName(u"actionLoad_observations_file")
        self.actionSelect_observations = QAction(MainWindow)
        self.actionSelect_observations.setObjectName(u"actionSelect_observations")
        self.actionConfigure_states_and_events = QAction(MainWindow)
        self.actionConfigure_states_and_events.setObjectName(u"actionConfigure_states_and_events")
        self.actionConfigure_states_and_events.setEnabled(False)
        self.actionEdit_event = QAction(MainWindow)
        self.actionEdit_event.setObjectName(u"actionEdit_event")
        self.actionLoad_configuration_file = QAction(MainWindow)
        self.actionLoad_configuration_file.setObjectName(u"actionLoad_configuration_file")
        self.actionMedia_file_information = QAction(MainWindow)
        self.actionMedia_file_information.setObjectName(u"actionMedia_file_information")
        self.actionStart_live_observation = QAction(MainWindow)
        self.actionStart_live_observation.setObjectName(u"actionStart_live_observation")
        self.actionNew_project = QAction(MainWindow)
        self.actionNew_project.setObjectName(u"actionNew_project")
        self.actionTime_budget = QAction(MainWindow)
        self.actionTime_budget.setObjectName(u"actionTime_budget")
        self.actionTime_budget.setEnabled(True)
        self.actionTime_budget.setIconVisibleInMenu(True)
        self.actionSave_project = QAction(MainWindow)
        self.actionSave_project.setObjectName(u"actionSave_project")
        self.actionOpen_project = QAction(MainWindow)
        self.actionOpen_project.setObjectName(u"actionOpen_project")
        self.actionSet_offset = QAction(MainWindow)
        self.actionSet_offset.setObjectName(u"actionSet_offset")
        self.actionEdit_project = QAction(MainWindow)
        self.actionEdit_project.setObjectName(u"actionEdit_project")
        self.actionSave_project_as = QAction(MainWindow)
        self.actionSave_project_as.setObjectName(u"actionSave_project_as")
        self.actionPreferences = QAction(MainWindow)
        self.actionPreferences.setObjectName(u"actionPreferences")
        self.actionNew_observation = QAction(MainWindow)
        self.actionNew_observation.setObjectName(u"actionNew_observation")
        self.actionSave_observation = QAction(MainWindow)
        self.actionSave_observation.setObjectName(u"actionSave_observation")
        self.actionClose_observation = QAction(MainWindow)
        self.actionClose_observation.setObjectName(u"actionClose_observation")
        self.actionEdit_current_observation = QAction(MainWindow)
        self.actionEdit_current_observation.setObjectName(u"actionEdit_current_observation")
        self.actionEdit_current_observation.setEnabled(False)
        self.actionOpen_observation_2 = QAction(MainWindow)
        self.actionOpen_observation_2.setObjectName(u"actionOpen_observation_2")
        self.actionOpen_observation_2.setEnabled(False)
        self.actionOpen_observation_2.setVisible(False)
        self.actionAdd_event = QAction(MainWindow)
        self.actionAdd_event.setObjectName(u"actionAdd_event")
        self.actionDeselectCurrentSubject = QAction(MainWindow)
        self.actionDeselectCurrentSubject.setObjectName(u"actionDeselectCurrentSubject")
        self.actionNext = QAction(MainWindow)
        self.actionNext.setObjectName(u"actionNext")
        self.actionNext.setIconVisibleInMenu(False)
        self.actionPrevious = QAction(MainWindow)
        self.actionPrevious.setObjectName(u"actionPrevious")
        self.actionJumpTo = QAction(MainWindow)
        self.actionJumpTo.setObjectName(u"actionJumpTo")
        self.actionJumpTo.setEnabled(True)
        self.actionJumpBackward = QAction(MainWindow)
        self.actionJumpBackward.setObjectName(u"actionJumpBackward")
        self.actionEdit_observation = QAction(MainWindow)
        self.actionEdit_observation.setObjectName(u"actionEdit_observation")
        self.actionEdit_observation.setEnabled(False)
        self.actionEdit_observation.setVisible(False)
        self.actionCheckUpdate = QAction(MainWindow)
        self.actionCheckUpdate.setObjectName(u"actionCheckUpdate")
        self.actionClose_project = QAction(MainWindow)
        self.actionClose_project.setObjectName(u"actionClose_project")
        self.actionObservationsList = QAction(MainWindow)
        self.actionObservationsList.setObjectName(u"actionObservationsList")
        self.actionNormalSpeed = QAction(MainWindow)
        self.actionNormalSpeed.setObjectName(u"actionNormalSpeed")
        self.actionSnapshot = QAction(MainWindow)
        self.actionSnapshot.setObjectName(u"actionSnapshot")
        self.actionFrame_by_frame = QAction(MainWindow)
        self.actionFrame_by_frame.setObjectName(u"actionFrame_by_frame")
        self.actionFrame_by_frame.setCheckable(True)
        self.actionFrame_by_frame.setVisible(False)
        self.actionAggregatedEventsTabularFormat = QAction(MainWindow)
        self.actionAggregatedEventsTabularFormat.setObjectName(u"actionAggregatedEventsTabularFormat")
        self.actionOpen_observation = QAction(MainWindow)
        self.actionOpen_observation.setObjectName(u"actionOpen_observation")
        self.actionAaaa = QAction(MainWindow)
        self.actionAaaa.setObjectName(u"actionAaaa")
        self.menuCreate_subtitles_2 = QAction(MainWindow)
        self.menuCreate_subtitles_2.setObjectName(u"menuCreate_subtitles_2")
        self.actionUser_guide = QAction(MainWindow)
        self.actionUser_guide.setObjectName(u"actionUser_guide")
        self.actionEdit_observation_2 = QAction(MainWindow)
        self.actionEdit_observation_2.setObjectName(u"actionEdit_observation_2")
        self.actionCheckStateEvents = QAction(MainWindow)
        self.actionCheckStateEvents.setObjectName(u"actionCheckStateEvents")
        self.actionRunEventOutside = QAction(MainWindow)
        self.actionRunEventOutside.setObjectName(u"actionRunEventOutside")
        self.actionEdit_selected_events = QAction(MainWindow)
        self.actionEdit_selected_events.setObjectName(u"actionEdit_selected_events")
        self.actionShow_spectrogram = QAction(MainWindow)
        self.actionShow_spectrogram.setObjectName(u"actionShow_spectrogram")
        self.actionExport_events_as_Praat_TextGrid = QAction(MainWindow)
        self.actionExport_events_as_Praat_TextGrid.setObjectName(u"actionExport_events_as_Praat_TextGrid")
        self.actionExtract_events_from_media_files = QAction(MainWindow)
        self.actionExtract_events_from_media_files.setObjectName(u"actionExtract_events_from_media_files")
        self.action_geometric_measurements = QAction(MainWindow)
        self.action_geometric_measurements.setObjectName(u"action_geometric_measurements")
        self.actionFrame_forward = QAction(MainWindow)
        self.actionFrame_forward.setObjectName(u"actionFrame_forward")
        self.actionFrame_backward = QAction(MainWindow)
        self.actionFrame_backward.setObjectName(u"actionFrame_backward")
        self.actionFilterBehaviors = QAction(MainWindow)
        self.actionFilterBehaviors.setObjectName(u"actionFilterBehaviors")
        self.actionShowAllBehaviors = QAction(MainWindow)
        self.actionShowAllBehaviors.setObjectName(u"actionShowAllBehaviors")
        self.actionExport_aggregated_events = QAction(MainWindow)
        self.actionExport_aggregated_events.setObjectName(u"actionExport_aggregated_events")
        self.actionCoding_pad = QAction(MainWindow)
        self.actionCoding_pad.setObjectName(u"actionCoding_pad")
        self.actionTime_budget_by_behaviors_category = QAction(MainWindow)
        self.actionTime_budget_by_behaviors_category.setObjectName(u"actionTime_budget_by_behaviors_category")
        self.actionExport_events_as_SDIS_file = QAction(MainWindow)
        self.actionExport_events_as_SDIS_file.setObjectName(u"actionExport_events_as_SDIS_file")
        self.actionRecode_resize_video = QAction(MainWindow)
        self.actionRecode_resize_video.setObjectName(u"actionRecode_resize_video")
        self.actionMedia_file_information_2 = QAction(MainWindow)
        self.actionMedia_file_information_2.setObjectName(u"actionMedia_file_information_2")
        self.actionCreate_transitions_flow_diagram = QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram.setObjectName(u"actionCreate_transitions_flow_diagram")
        self.actionCreate_transitions_flow_diagram_2 = QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram_2.setObjectName(u"actionCreate_transitions_flow_diagram_2")
        self.actionAll_transitions = QAction(MainWindow)
        self.actionAll_transitions.setObjectName(u"actionAll_transitions")
        self.actionNumber_of_transitions = QAction(MainWindow)
        self.actionNumber_of_transitions.setObjectName(u"actionNumber_of_transitions")
        self.actionFrequencies_of_transitions_after_behaviors = QAction(MainWindow)
        self.actionFrequencies_of_transitions_after_behaviors.setObjectName(u"actionFrequencies_of_transitions_after_behaviors")
        self.actionFind_replace_events = QAction(MainWindow)
        self.actionFind_replace_events.setObjectName(u"actionFind_replace_events")
        self.actionFind_events = QAction(MainWindow)
        self.actionFind_events.setObjectName(u"actionFind_events")
        self.actionHow_to_cite_BORIS = QAction(MainWindow)
        self.actionHow_to_cite_BORIS.setObjectName(u"actionHow_to_cite_BORIS")
        self.actionZoom1_1_1 = QAction(MainWindow)
        self.actionZoom1_1_1.setObjectName(u"actionZoom1_1_1")
        self.actionZoom1_1_1.setCheckable(True)
        self.actionZoom1_2_1 = QAction(MainWindow)
        self.actionZoom1_2_1.setObjectName(u"actionZoom1_2_1")
        self.actionZoom1_2_1.setCheckable(True)
        self.actionZoom1_1_2 = QAction(MainWindow)
        self.actionZoom1_1_2.setObjectName(u"actionZoom1_1_2")
        self.actionZoom1_1_2.setCheckable(True)
        self.actionZoom1_1_4 = QAction(MainWindow)
        self.actionZoom1_1_4.setObjectName(u"actionZoom1_1_4")
        self.actionZoom1_1_4.setCheckable(True)
        self.actionZoom1_fitwindow = QAction(MainWindow)
        self.actionZoom1_fitwindow.setObjectName(u"actionZoom1_fitwindow")
        self.actionZoom1_fitwindow.setCheckable(True)
        self.actionZoom2_fitwindow = QAction(MainWindow)
        self.actionZoom2_fitwindow.setObjectName(u"actionZoom2_fitwindow")
        self.actionZoom2_fitwindow.setCheckable(True)
        self.actionZoom2_1_4 = QAction(MainWindow)
        self.actionZoom2_1_4.setObjectName(u"actionZoom2_1_4")
        self.actionZoom2_1_4.setCheckable(True)
        self.actionZoom2_1_2 = QAction(MainWindow)
        self.actionZoom2_1_2.setObjectName(u"actionZoom2_1_2")
        self.actionZoom2_1_2.setCheckable(True)
        self.actionZoom2_1_1 = QAction(MainWindow)
        self.actionZoom2_1_1.setObjectName(u"actionZoom2_1_1")
        self.actionZoom2_1_1.setCheckable(True)
        self.actionZoom2_2_1 = QAction(MainWindow)
        self.actionZoom2_2_1.setObjectName(u"actionZoom2_2_1")
        self.actionZoom2_2_1.setCheckable(True)
        self.actionFilterSubjects = QAction(MainWindow)
        self.actionFilterSubjects.setObjectName(u"actionFilterSubjects")
        self.actionShowAllSubjects = QAction(MainWindow)
        self.actionShowAllSubjects.setObjectName(u"actionShowAllSubjects")
        self.actionSend_project = QAction(MainWindow)
        self.actionSend_project.setObjectName(u"actionSend_project")
        self.actionViewBehavior = QAction(MainWindow)
        self.actionViewBehavior.setObjectName(u"actionViewBehavior")
        self.actionBehaviors_coding_map = QAction(MainWindow)
        self.actionBehaviors_coding_map.setObjectName(u"actionBehaviors_coding_map")
        self.action_create_behaviors_coding_map = QAction(MainWindow)
        self.action_create_behaviors_coding_map.setObjectName(u"action_create_behaviors_coding_map")
        self.action_create_modifiers_coding_map = QAction(MainWindow)
        self.action_create_modifiers_coding_map.setObjectName(u"action_create_modifiers_coding_map")
        self.actionPlot_events1 = QAction(MainWindow)
        self.actionPlot_events1.setObjectName(u"actionPlot_events1")
        self.actionPlot_events2 = QAction(MainWindow)
        self.actionPlot_events2.setObjectName(u"actionPlot_events2")
        self.actionCohen_s_kappa = QAction(MainWindow)
        self.actionCohen_s_kappa.setObjectName(u"actionCohen_s_kappa")
        self.actionTime_budget_report = QAction(MainWindow)
        self.actionTime_budget_report.setObjectName(u"actionTime_budget_report")
        self.actionCheckStateEventsSingleObs = QAction(MainWindow)
        self.actionCheckStateEventsSingleObs.setObjectName(u"actionCheckStateEventsSingleObs")
        self.actionSubjects_pad = QAction(MainWindow)
        self.actionSubjects_pad.setObjectName(u"actionSubjects_pad")
        self.actionShow_data_files = QAction(MainWindow)
        self.actionShow_data_files.setObjectName(u"actionShow_data_files")
        self.actionConverters_manager = QAction(MainWindow)
        self.actionConverters_manager.setObjectName(u"actionConverters_manager")
        self.actionView_observation = QAction(MainWindow)
        self.actionView_observation.setObjectName(u"actionView_observation")
        self.actionRemove_path_from_media_files = QAction(MainWindow)
        self.actionRemove_path_from_media_files.setObjectName(u"actionRemove_path_from_media_files")
        self.actionRemove_path_from_media_files.setVisible(False)
        self.actionCheck_project = QAction(MainWindow)
        self.actionCheck_project.setObjectName(u"actionCheck_project")
        self.actionBehavior_bar_plot = QAction(MainWindow)
        self.actionBehavior_bar_plot.setObjectName(u"actionBehavior_bar_plot")
        self.action_obs_list = QAction(MainWindow)
        self.action_obs_list.setObjectName(u"action_obs_list")
        self.actionTest = QAction(MainWindow)
        self.actionTest.setObjectName(u"actionTest")
        self.actionTest_stb2 = QAction(MainWindow)
        self.actionTest_stb2.setObjectName(u"actionTest_stb2")
        self.actionClose_unpaired_events = QAction(MainWindow)
        self.actionClose_unpaired_events.setObjectName(u"actionClose_unpaired_events")
        self.actionRotate_video = QAction(MainWindow)
        self.actionRotate_video.setObjectName(u"actionRotate_video")
        self.actionExport_observations_list = QAction(MainWindow)
        self.actionExport_observations_list.setObjectName(u"actionExport_observations_list")
        self.actionExportEvents_2 = QAction(MainWindow)
        self.actionExportEvents_2.setObjectName(u"actionExportEvents_2")
        self.actionJWatcher = QAction(MainWindow)
        self.actionJWatcher.setObjectName(u"actionJWatcher")
        self.actionCloseObs = QAction(MainWindow)
        self.actionCloseObs.setObjectName(u"actionCloseObs")
        self.actionCloseObs.setEnabled(True)
        self.actionFilter_events = QAction(MainWindow)
        self.actionFilter_events.setObjectName(u"actionFilter_events")
        self.actionShow_all_events = QAction(MainWindow)
        self.actionShow_all_events.setObjectName(u"actionShow_all_events")
        self.actionEdit_event_time = QAction(MainWindow)
        self.actionEdit_event_time.setObjectName(u"actionEdit_event_time")
        self.actionCopy_events = QAction(MainWindow)
        self.actionCopy_events.setObjectName(u"actionCopy_events")
        self.actionPaste_events = QAction(MainWindow)
        self.actionPaste_events.setObjectName(u"actionPaste_events")
        self.actionNoldus_Observer_template = QAction(MainWindow)
        self.actionNoldus_Observer_template.setObjectName(u"actionNoldus_Observer_template")
        self.actionExplore_project = QAction(MainWindow)
        self.actionExplore_project.setObjectName(u"actionExplore_project")
        self.actionShow_the_sound_waveform = QAction(MainWindow)
        self.actionShow_the_sound_waveform.setObjectName(u"actionShow_the_sound_waveform")
        self.actionNeedleman_Wunsch = QAction(MainWindow)
        self.actionNeedleman_Wunsch.setObjectName(u"actionNeedleman_Wunsch")
        self.actionExtract_frames_from_media_files = QAction(MainWindow)
        self.actionExtract_frames_from_media_files.setObjectName(u"actionExtract_frames_from_media_files")
        self.action_behavior_binary_table = QAction(MainWindow)
        self.action_behavior_binary_table.setObjectName(u"action_behavior_binary_table")
        self.action_behavior_binary_table.setEnabled(True)
        self.actionPlot_current_observation = QAction(MainWindow)
        self.actionPlot_current_observation.setObjectName(u"actionPlot_current_observation")
        self.actionFind_in_current_obs = QAction(MainWindow)
        self.actionFind_in_current_obs.setObjectName(u"actionFind_in_current_obs")
        self.action_advanced_event_filtering = QAction(MainWindow)
        self.action_advanced_event_filtering.setObjectName(u"action_advanced_event_filtering")
        self.action_block_dockwidgets = QAction(MainWindow)
        self.action_block_dockwidgets.setObjectName(u"action_block_dockwidgets")
        self.action_block_dockwidgets.setCheckable(True)
        self.actionseparated_subjects = QAction(MainWindow)
        self.actionseparated_subjects.setObjectName(u"actionseparated_subjects")
        self.actiongrouped_subjects = QAction(MainWindow)
        self.actiongrouped_subjects.setObjectName(u"actiongrouped_subjects")
        self.actionCurrent_Time_Budget = QAction(MainWindow)
        self.actionCurrent_Time_Budget.setObjectName(u"actionCurrent_Time_Budget")
        self.actionSynthetic_binned_time_budget = QAction(MainWindow)
        self.actionSynthetic_binned_time_budget.setObjectName(u"actionSynthetic_binned_time_budget")
        self.actionZoom_level = QAction(MainWindow)
        self.actionZoom_level.setObjectName(u"actionZoom_level")
        self.actionDisplay_subtitles = QAction(MainWindow)
        self.actionDisplay_subtitles.setObjectName(u"actionDisplay_subtitles")
        self.actionAdd_image_overlay_on_video = QAction(MainWindow)
        self.actionAdd_image_overlay_on_video.setObjectName(u"actionAdd_image_overlay_on_video")
        self.actionRemove_image_overlay = QAction(MainWindow)
        self.actionRemove_image_overlay.setObjectName(u"actionRemove_image_overlay")
        self.actionPlot_events_in_real_time = QAction(MainWindow)
        self.actionPlot_events_in_real_time.setObjectName(u"actionPlot_events_in_real_time")
        self.actionVideo_equalizer = QAction(MainWindow)
        self.actionVideo_equalizer.setObjectName(u"actionVideo_equalizer")
        self.actionRemove_observations = QAction(MainWindow)
        self.actionRemove_observations.setObjectName(u"actionRemove_observations")
        self.action_latency = QAction(MainWindow)
        self.action_latency.setObjectName(u"action_latency")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionaaa = QAction(MainWindow)
        self.actionaaa.setObjectName(u"actionaaa")
        self.action_media_file_and_images_directories_relative_path = QAction(MainWindow)
        self.action_media_file_and_images_directories_relative_path.setObjectName(u"action_media_file_and_images_directories_relative_path")
        self.action_data_files_relative_path = QAction(MainWindow)
        self.action_data_files_relative_path.setObjectName(u"action_data_files_relative_path")
        self.action_remove_media_files_and_images_directories_path = QAction(MainWindow)
        self.action_remove_media_files_and_images_directories_path.setObjectName(u"action_remove_media_files_and_images_directories_path")
        self.action_remove_data_files_path = QAction(MainWindow)
        self.action_remove_data_files_path.setObjectName(u"action_remove_data_files_path")
        self.actionPlot_current_time_budget = QAction(MainWindow)
        self.actionPlot_current_time_budget.setObjectName(u"actionPlot_current_time_budget")
        self.actionMerge_media_files = QAction(MainWindow)
        self.actionMerge_media_files.setObjectName(u"actionMerge_media_files")
        self.actionExport_project = QAction(MainWindow)
        self.actionExport_project.setObjectName(u"actionExport_project")
        self.actionConfigure_twEvents_columns = QAction(MainWindow)
        self.actionConfigure_twEvents_columns.setObjectName(u"actionConfigure_twEvents_columns")
        self.actionRotate_current_video = QAction(MainWindow)
        self.actionRotate_current_video.setObjectName(u"actionRotate_current_video")
        self.action_deinterlace = QAction(MainWindow)
        self.action_deinterlace.setObjectName(u"action_deinterlace")
        self.action_deinterlace.setCheckable(True)
        self.action_cooccurence = QAction(MainWindow)
        self.action_cooccurence.setObjectName(u"action_cooccurence")
        self.action_create_observations = QAction(MainWindow)
        self.action_create_observations.setObjectName(u"action_create_observations")
        self.actionConfigure_tvevents_columns = QAction(MainWindow)
        self.actionConfigure_tvevents_columns.setObjectName(u"actionConfigure_tvevents_columns")
        self.actionAdd_frame_indexes = QAction(MainWindow)
        self.actionAdd_frame_indexes.setObjectName(u"actionAdd_frame_indexes")
        self.action_load_plugins = QAction(MainWindow)
        self.action_load_plugins.setObjectName(u"action_load_plugins")
        self.actionCreate_video_spectrogram = QAction(MainWindow)
        self.actionCreate_video_spectrogram.setObjectName(u"actionCreate_video_spectrogram")
        self.action_change_time_offset_of_players = QAction(MainWindow)
        self.action_change_time_offset_of_players.setObjectName(u"action_change_time_offset_of_players")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.horizontalLayout_2 = QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.verticalLayout_3 = QVBoxLayout()
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.w_logo = QWidget(self.centralwidget)
        self.w_logo.setObjectName(u"w_logo")
        self.verticalLayout_8 = QVBoxLayout(self.w_logo)
        self.verticalLayout_8.setObjectName(u"verticalLayout_8")
        self.verticalLayout_6 = QVBoxLayout()
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.lbLogoBoris = QLabel(self.w_logo)
        self.lbLogoBoris.setObjectName(u"lbLogoBoris")
        self.lbLogoBoris.setScaledContents(False)
        self.lbLogoBoris.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.verticalLayout_6.addWidget(self.lbLogoBoris)

        self.lbLogoUnito = QLabel(self.w_logo)
        self.lbLogoUnito.setObjectName(u"lbLogoUnito")
        self.lbLogoUnito.setTextFormat(Qt.TextFormat.AutoText)
        self.lbLogoUnito.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lbLogoUnito.setWordWrap(True)

        self.verticalLayout_6.addWidget(self.lbLogoUnito)


        self.verticalLayout_8.addLayout(self.verticalLayout_6)


        self.verticalLayout_3.addWidget(self.w_logo)

        self.w_obs_info = QWidget(self.centralwidget)
        self.w_obs_info.setObjectName(u"w_obs_info")
        self.w_obs_info.setEnabled(True)
        self.verticalLayout_10 = QVBoxLayout(self.w_obs_info)
        self.verticalLayout_10.setObjectName(u"verticalLayout_10")
        self.verticalLayout_9 = QVBoxLayout()
        self.verticalLayout_9.setObjectName(u"verticalLayout_9")
        self.lb_player_status = QLabel(self.w_obs_info)
        self.lb_player_status.setObjectName(u"lb_player_status")

        self.verticalLayout_9.addWidget(self.lb_player_status)

        self.lb_current_media_time = QLabel(self.w_obs_info)
        self.lb_current_media_time.setObjectName(u"lb_current_media_time")
        self.lb_current_media_time.setWordWrap(True)

        self.verticalLayout_9.addWidget(self.lb_current_media_time)

        self.lb_video_info = QLabel(self.w_obs_info)
        self.lb_video_info.setObjectName(u"lb_video_info")

        self.verticalLayout_9.addWidget(self.lb_video_info)

        self.lb_zoom_level = QLabel(self.w_obs_info)
        self.lb_zoom_level.setObjectName(u"lb_zoom_level")

        self.verticalLayout_9.addWidget(self.lb_zoom_level)

        self.verticalSpacer_2 = QSpacerItem(20, 40, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)

        self.verticalLayout_9.addItem(self.verticalSpacer_2)

        self.lbFocalSubject = QLabel(self.w_obs_info)
        self.lbFocalSubject.setObjectName(u"lbFocalSubject")
        self.lbFocalSubject.setWordWrap(True)

        self.verticalLayout_9.addWidget(self.lbFocalSubject)

        self.lbCurrentStates = QLabel(self.w_obs_info)
        self.lbCurrentStates.setObjectName(u"lbCurrentStates")
        self.lbCurrentStates.setWordWrap(True)

        self.verticalLayout_9.addWidget(self.lbCurrentStates)


        self.verticalLayout_10.addLayout(self.verticalLayout_9)

        self.w_live = QWidget(self.w_obs_info)
        self.w_live.setObjectName(u"w_live")
        self.verticalLayout_11 = QVBoxLayout(self.w_live)
        self.verticalLayout_11.setObjectName(u"verticalLayout_11")
        self.pb_live_obs = QPushButton(self.w_live)
        self.pb_live_obs.setObjectName(u"pb_live_obs")

        self.verticalLayout_11.addWidget(self.pb_live_obs)


        self.verticalLayout_10.addWidget(self.w_live)


        self.verticalLayout_3.addWidget(self.w_obs_info)


        self.horizontalLayout.addLayout(self.verticalLayout_3)


        self.horizontalLayout_2.addLayout(self.horizontalLayout)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1509, 25))
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuRecent_projects = QMenu(self.menuFile)
        self.menuRecent_projects.setObjectName(u"menuRecent_projects")
        self.menuImport_project = QMenu(self.menuFile)
        self.menuImport_project.setObjectName(u"menuImport_project")
        self.menuMedia_file_Images_directories = QMenu(self.menuFile)
        self.menuMedia_file_Images_directories.setObjectName(u"menuMedia_file_Images_directories")
        self.menuSet_paths_relative_to_project_dir = QMenu(self.menuMedia_file_Images_directories)
        self.menuSet_paths_relative_to_project_dir.setObjectName(u"menuSet_paths_relative_to_project_dir")
        self.menuRemove_paths = QMenu(self.menuMedia_file_Images_directories)
        self.menuRemove_paths.setObjectName(u"menuRemove_paths")
        self.menuObservations = QMenu(self.menubar)
        self.menuObservations.setObjectName(u"menuObservations")
        self.menuCreate_transitions_matrix = QMenu(self.menuObservations)
        self.menuCreate_transitions_matrix.setObjectName(u"menuCreate_transitions_matrix")
        self.menuExport_events = QMenu(self.menuObservations)
        self.menuExport_events.setObjectName(u"menuExport_events")
        self.menuas_behavioural_sequences = QMenu(self.menuExport_events)
        self.menuas_behavioural_sequences.setObjectName(u"menuas_behavioural_sequences")
        self.menuAnalyze = QMenu(self.menubar)
        self.menuAnalyze.setObjectName(u"menuAnalyze")
        self.menuPlot_events = QMenu(self.menuAnalyze)
        self.menuPlot_events.setObjectName(u"menuPlot_events")
        self.menuInter_rater_reliability = QMenu(self.menuAnalyze)
        self.menuInter_rater_reliability.setObjectName(u"menuInter_rater_reliability")
        self.menuSimilarities = QMenu(self.menuAnalyze)
        self.menuSimilarities.setObjectName(u"menuSimilarities")
        self.menu_plugins = QMenu(self.menuAnalyze)
        self.menu_plugins.setObjectName(u"menu_plugins")
        self.menuPlayback = QMenu(self.menubar)
        self.menuPlayback.setObjectName(u"menuPlayback")
        self.menuImage_overlay_on_video_2 = QMenu(self.menuPlayback)
        self.menuImage_overlay_on_video_2.setObjectName(u"menuImage_overlay_on_video_2")
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        self.menuTransitions_flow_diagram = QMenu(self.menuTools)
        self.menuTransitions_flow_diagram.setObjectName(u"menuTransitions_flow_diagram")
        self.menu_coding_map_creator = QMenu(self.menuTools)
        self.menu_coding_map_creator.setObjectName(u"menu_coding_map_creator")
        self.menuMedia_file = QMenu(self.menuTools)
        self.menuMedia_file.setObjectName(u"menuMedia_file")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        self.toolBar.setEnabled(True)
        MainWindow.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.dwEthogram = QDockWidget(MainWindow)
        self.dwEthogram.setObjectName(u"dwEthogram")
        self.dwEthogram.setFloating(False)
        self.dwEthogram.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetFloatable|QDockWidget.DockWidgetFeature.DockWidgetMovable)
        self.dockWidgetContents_3 = QWidget()
        self.dockWidgetContents_3.setObjectName(u"dockWidgetContents_3")
        self.verticalLayout_5 = QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.verticalLayout_4 = QVBoxLayout()
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.twEthogram = QTableWidget(self.dockWidgetContents_3)
        if (self.twEthogram.columnCount() < 8):
            self.twEthogram.setColumnCount(8)
        __qtablewidgetitem = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(0, __qtablewidgetitem)
        __qtablewidgetitem1 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(1, __qtablewidgetitem1)
        __qtablewidgetitem2 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(2, __qtablewidgetitem2)
        __qtablewidgetitem3 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(3, __qtablewidgetitem3)
        __qtablewidgetitem4 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(4, __qtablewidgetitem4)
        __qtablewidgetitem5 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(5, __qtablewidgetitem5)
        __qtablewidgetitem6 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(6, __qtablewidgetitem6)
        __qtablewidgetitem7 = QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(7, __qtablewidgetitem7)
        self.twEthogram.setObjectName(u"twEthogram")
        self.twEthogram.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.twEthogram.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.twEthogram.setAlternatingRowColors(True)
        self.twEthogram.setSelectionMode(QAbstractItemView.SelectionMode.SingleSelection)
        self.twEthogram.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.twEthogram.setSortingEnabled(False)

        self.verticalLayout_4.addWidget(self.twEthogram)


        self.verticalLayout_5.addLayout(self.verticalLayout_4)

        self.dwEthogram.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dwEthogram)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        self.statusbar.setSizeGripEnabled(True)
        MainWindow.setStatusBar(self.statusbar)
        self.dwEvents = QDockWidget(MainWindow)
        self.dwEvents.setObjectName(u"dwEvents")
        self.dwEvents.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.dwEvents.setFloating(False)
        self.dwEvents.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetFloatable|QDockWidget.DockWidgetFeature.DockWidgetMovable)
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.verticalLayout = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.splitter = QSplitter(self.dockWidgetContents_2)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setOrientation(Qt.Orientation.Vertical)
        self.tv_events = QTableView(self.splitter)
        self.tv_events.setObjectName(u"tv_events")
        self.tv_events.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.tv_events.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.splitter.addWidget(self.tv_events)

        self.verticalLayout.addWidget(self.splitter)

        self.dwEvents.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dwEvents)
        self.dwSubjects = QDockWidget(MainWindow)
        self.dwSubjects.setObjectName(u"dwSubjects")
        self.dwSubjects.setFloating(False)
        self.dwSubjects.setFeatures(QDockWidget.DockWidgetFeature.DockWidgetFloatable|QDockWidget.DockWidgetFeature.DockWidgetMovable)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_2 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.twSubjects = QTableWidget(self.dockWidgetContents)
        if (self.twSubjects.columnCount() < 4):
            self.twSubjects.setColumnCount(4)
        __qtablewidgetitem8 = QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(0, __qtablewidgetitem8)
        __qtablewidgetitem9 = QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(1, __qtablewidgetitem9)
        __qtablewidgetitem10 = QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(2, __qtablewidgetitem10)
        __qtablewidgetitem11 = QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(3, __qtablewidgetitem11)
        self.twSubjects.setObjectName(u"twSubjects")
        self.twSubjects.setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.twSubjects.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.twSubjects.setAlternatingRowColors(True)
        self.twSubjects.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)

        self.verticalLayout_2.addWidget(self.twSubjects)

        self.dwSubjects.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dwSubjects)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuObservations.menuAction())
        self.menubar.addAction(self.menuPlayback.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAnalyze.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuHelp.addAction(self.actionUser_guide)
        self.menuHelp.addAction(self.actionCheckUpdate)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuFile.addAction(self.actionNew_project)
        self.menuFile.addAction(self.actionOpen_project)
        self.menuFile.addAction(self.menuRecent_projects.menuAction())
        self.menuFile.addAction(self.menuImport_project.menuAction())
        self.menuFile.addAction(self.actionEdit_project)
        self.menuFile.addAction(self.actionSave_project)
        self.menuFile.addAction(self.actionSave_project_as)
        self.menuFile.addAction(self.actionExport_project)
        self.menuFile.addAction(self.actionClose_project)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCheck_project)
        self.menuFile.addAction(self.menuMedia_file_Images_directories.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPreferences)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuRecent_projects.addSeparator()
        self.menuImport_project.addAction(self.actionNoldus_Observer_template)
        self.menuMedia_file_Images_directories.addAction(self.actionRemove_path_from_media_files)
        self.menuMedia_file_Images_directories.addAction(self.menuSet_paths_relative_to_project_dir.menuAction())
        self.menuMedia_file_Images_directories.addAction(self.menuRemove_paths.menuAction())
        self.menuSet_paths_relative_to_project_dir.addAction(self.action_media_file_and_images_directories_relative_path)
        self.menuSet_paths_relative_to_project_dir.addAction(self.action_data_files_relative_path)
        self.menuRemove_paths.addAction(self.action_remove_media_files_and_images_directories_path)
        self.menuRemove_paths.addAction(self.action_remove_data_files_path)
        self.menuObservations.addAction(self.actionNew_observation)
        self.menuObservations.addAction(self.actionOpen_observation)
        self.menuObservations.addAction(self.actionView_observation)
        self.menuObservations.addAction(self.actionEdit_observation_2)
        self.menuObservations.addAction(self.actionObservationsList)
        self.menuObservations.addAction(self.actionOpen_observation_2)
        self.menuObservations.addAction(self.actionEdit_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionClose_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.action_create_observations)
        self.menuObservations.addAction(self.actionRemove_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionLoad_observations_file)
        self.menuObservations.addAction(self.actionExport_observations_list)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionAdd_event)
        self.menuObservations.addAction(self.actionEdit_selected_events)
        self.menuObservations.addAction(self.actionEdit_event_time)
        self.menuObservations.addAction(self.actionUndo)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionExplore_project)
        self.menuObservations.addAction(self.actionFind_events)
        self.menuObservations.addAction(self.actionFind_replace_events)
        self.menuObservations.addAction(self.actionCheckStateEvents)
        self.menuObservations.addAction(self.actionClose_unpaired_events)
        self.menuObservations.addAction(self.actionAdd_frame_indexes)
        self.menuObservations.addAction(self.actionSelect_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionDelete_selected_events)
        self.menuObservations.addAction(self.actionDelete_all_events)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuExport_events.menuAction())
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_subtitles_2)
        self.menuObservations.addAction(self.actionExtract_events_from_media_files)
        self.menuObservations.addAction(self.actionExtract_frames_from_media_files)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_transitions_matrix.menuAction())
        self.menuCreate_transitions_matrix.addAction(self.actionAll_transitions)
        self.menuCreate_transitions_matrix.addAction(self.actionFrequencies_of_transitions_after_behaviors)
        self.menuCreate_transitions_matrix.addAction(self.actionNumber_of_transitions)
        self.menuExport_events.addAction(self.actionExportEvents_2)
        self.menuExport_events.addAction(self.actionExport_aggregated_events)
        self.menuExport_events.addAction(self.menuas_behavioural_sequences.menuAction())
        self.menuExport_events.addAction(self.actionExport_events_as_Praat_TextGrid)
        self.menuExport_events.addAction(self.actionJWatcher)
        self.menuExport_events.addAction(self.action_behavior_binary_table)
        self.menuas_behavioural_sequences.addAction(self.actionseparated_subjects)
        self.menuas_behavioural_sequences.addAction(self.actiongrouped_subjects)
        self.menuAnalyze.addAction(self.menu_plugins.menuAction())
        self.menuAnalyze.addAction(self.actionTime_budget)
        self.menuAnalyze.addAction(self.actionTime_budget_by_behaviors_category)
        self.menuAnalyze.addAction(self.actionTime_budget_report)
        self.menuAnalyze.addAction(self.actionSynthetic_binned_time_budget)
        self.menuAnalyze.addAction(self.menuPlot_events.menuAction())
        self.menuAnalyze.addAction(self.menuInter_rater_reliability.menuAction())
        self.menuAnalyze.addAction(self.menuSimilarities.menuAction())
        self.menuAnalyze.addAction(self.action_cooccurence)
        self.menuAnalyze.addAction(self.action_advanced_event_filtering)
        self.menuAnalyze.addAction(self.action_latency)
        self.menuPlot_events.addAction(self.actionPlot_events2)
        self.menuPlot_events.addAction(self.actionBehavior_bar_plot)
        self.menuInter_rater_reliability.addAction(self.actionCohen_s_kappa)
        self.menuSimilarities.addAction(self.actionNeedleman_Wunsch)
        self.menu_plugins.addAction(self.action_load_plugins)
        self.menuPlayback.addAction(self.actionPlay)
        self.menuPlayback.addAction(self.actionPrevious)
        self.menuPlayback.addAction(self.actionNext)
        self.menuPlayback.addAction(self.actionJumpForward)
        self.menuPlayback.addAction(self.actionJumpBackward)
        self.menuPlayback.addAction(self.actionJumpTo)
        self.menuPlayback.addAction(self.action_change_time_offset_of_players)
        self.menuPlayback.addAction(self.action_deinterlace)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionZoom_level)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionRotate_current_video)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionDisplay_subtitles)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.menuImage_overlay_on_video_2.menuAction())
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionVideo_equalizer)
        self.menuImage_overlay_on_video_2.addAction(self.actionAdd_image_overlay_on_video)
        self.menuImage_overlay_on_video_2.addAction(self.actionRemove_image_overlay)
        self.menuTools.addAction(self.menuMedia_file.menuAction())
        self.menuTools.addAction(self.action_block_dockwidgets)
        self.menuTools.addAction(self.actionPlot_events_in_real_time)
        self.menuTools.addAction(self.actionShow_spectrogram)
        self.menuTools.addAction(self.actionShow_the_sound_waveform)
        self.menuTools.addAction(self.actionShow_data_files)
        self.menuTools.addAction(self.action_geometric_measurements)
        self.menuTools.addAction(self.actionBehaviors_coding_map)
        self.menuTools.addAction(self.actionCoding_pad)
        self.menuTools.addAction(self.actionSubjects_pad)
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.menu_coding_map_creator.menuAction())
        self.menuTools.addAction(self.menuTransitions_flow_diagram.menuAction())
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram)
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram_2)
        self.menu_coding_map_creator.addAction(self.action_create_behaviors_coding_map)
        self.menu_coding_map_creator.addAction(self.action_create_modifiers_coding_map)
        self.menuMedia_file.addAction(self.actionMedia_file_information_2)
        self.menuMedia_file.addAction(self.actionRecode_resize_video)
        self.menuMedia_file.addAction(self.actionRotate_video)
        self.menuMedia_file.addAction(self.actionMerge_media_files)
        self.menuMedia_file.addAction(self.actionCreate_video_spectrogram)
        self.toolBar.addAction(self.action_obs_list)
        self.toolBar.addAction(self.actionPlay)
        self.toolBar.addAction(self.actionReset)
        self.toolBar.addAction(self.actionJumpBackward)
        self.toolBar.addAction(self.actionJumpForward)
        self.toolBar.addAction(self.actionNormalSpeed)
        self.toolBar.addAction(self.actionFaster)
        self.toolBar.addAction(self.actionSlower)
        self.toolBar.addAction(self.actionPrevious)
        self.toolBar.addAction(self.actionNext)
        self.toolBar.addAction(self.actionSnapshot)
        self.toolBar.addAction(self.actionFrame_by_frame)
        self.toolBar.addAction(self.actionFrame_backward)
        self.toolBar.addAction(self.actionFrame_forward)
        self.toolBar.addAction(self.actionCloseObs)
        self.toolBar.addAction(self.actionPlot_events_in_real_time)
        self.toolBar.addAction(self.actionCurrent_Time_Budget)
        self.toolBar.addAction(self.actionPlot_current_observation)
        self.toolBar.addAction(self.actionPlot_current_time_budget)
        self.toolBar.addAction(self.action_geometric_measurements)
        self.toolBar.addAction(self.actionFind_in_current_obs)
        self.toolBar.addAction(self.actionExplore_project)
        self.toolBar.addAction(self.actionPreferences)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"BORIS", None))
        self.actionDocumentation.setText(QCoreApplication.translate("MainWindow", u"Documentation", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionQuit.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
        self.actionPause.setText(QCoreApplication.translate("MainWindow", u"Pause", None))
#if QT_CONFIG(tooltip)
        self.actionPause.setToolTip(QCoreApplication.translate("MainWindow", u"Pause", None))
#endif // QT_CONFIG(tooltip)
        self.actionPlay.setText(QCoreApplication.translate("MainWindow", u"Play", None))
        self.actionOpen_video_file.setText(QCoreApplication.translate("MainWindow", u"Open media file", None))
        self.actionReset.setText(QCoreApplication.translate("MainWindow", u"Reset", None))
        self.actionFaster.setText(QCoreApplication.translate("MainWindow", u"Faster", None))
        self.actionSlower.setText(QCoreApplication.translate("MainWindow", u"Slower", None))
        self.actionJumpForward.setText(QCoreApplication.translate("MainWindow", u"Jump forward", None))
#if QT_CONFIG(shortcut)
        self.actionJumpForward.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionLoad_configuration.setText(QCoreApplication.translate("MainWindow", u"Load configuration", None))
        self.actionDelete_selected_events.setText(QCoreApplication.translate("MainWindow", u"Delete selected events", None))
        self.actionDelete_all_events.setText(QCoreApplication.translate("MainWindow", u"Delete all events", None))
        self.actionSort_observations.setText(QCoreApplication.translate("MainWindow", u"Sort events", None))
        self.actionLoad_observations_file.setText(QCoreApplication.translate("MainWindow", u"Import observations", None))
        self.actionSelect_observations.setText(QCoreApplication.translate("MainWindow", u"Select events from interval", None))
        self.actionConfigure_states_and_events.setText(QCoreApplication.translate("MainWindow", u"Configure states and events", None))
        self.actionEdit_event.setText(QCoreApplication.translate("MainWindow", u"Edit event", None))
        self.actionLoad_configuration_file.setText(QCoreApplication.translate("MainWindow", u"Load state and events configuration file", None))
        self.actionMedia_file_information.setText(QCoreApplication.translate("MainWindow", u"Media file information", None))
        self.actionStart_live_observation.setText(QCoreApplication.translate("MainWindow", u"Start observation without media file", None))
        self.actionNew_project.setText(QCoreApplication.translate("MainWindow", u"New project", None))
        self.actionTime_budget.setText(QCoreApplication.translate("MainWindow", u"Time budget", None))
        self.actionSave_project.setText(QCoreApplication.translate("MainWindow", u"Save project", None))
#if QT_CONFIG(shortcut)
        self.actionSave_project.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen_project.setText(QCoreApplication.translate("MainWindow", u"Open project", None))
        self.actionSet_offset.setText(QCoreApplication.translate("MainWindow", u"Set time offset", None))
        self.actionEdit_project.setText(QCoreApplication.translate("MainWindow", u"Edit project", None))
        self.actionSave_project_as.setText(QCoreApplication.translate("MainWindow", u"Save project as ...", None))
        self.actionPreferences.setText(QCoreApplication.translate("MainWindow", u"Preferences", None))
        self.actionNew_observation.setText(QCoreApplication.translate("MainWindow", u"New observation", None))
#if QT_CONFIG(shortcut)
        self.actionNew_observation.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_observation.setText(QCoreApplication.translate("MainWindow", u"Save current observation", None))
        self.actionClose_observation.setText(QCoreApplication.translate("MainWindow", u"Close observation", None))
#if QT_CONFIG(shortcut)
        self.actionClose_observation.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit_current_observation.setText(QCoreApplication.translate("MainWindow", u"Edit current observation", None))
        self.actionOpen_observation_2.setText(QCoreApplication.translate("MainWindow", u"Open observation", None))
        self.actionAdd_event.setText(QCoreApplication.translate("MainWindow", u"Add event", None))
#if QT_CONFIG(shortcut)
        self.actionAdd_event.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionDeselectCurrentSubject.setText(QCoreApplication.translate("MainWindow", u"Deselect current subject", None))
        self.actionNext.setText(QCoreApplication.translate("MainWindow", u"Next", None))
#if QT_CONFIG(tooltip)
        self.actionNext.setToolTip(QCoreApplication.translate("MainWindow", u"Next media file", None))
#endif // QT_CONFIG(tooltip)
        self.actionPrevious.setText(QCoreApplication.translate("MainWindow", u"Previous", None))
#if QT_CONFIG(tooltip)
        self.actionPrevious.setToolTip(QCoreApplication.translate("MainWindow", u"Previous media file", None))
#endif // QT_CONFIG(tooltip)
        self.actionJumpTo.setText(QCoreApplication.translate("MainWindow", u"Jump to specific time", None))
        self.actionJumpBackward.setText(QCoreApplication.translate("MainWindow", u"Jump backward", None))
#if QT_CONFIG(tooltip)
        self.actionJumpBackward.setToolTip(QCoreApplication.translate("MainWindow", u"Jump backward", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionJumpBackward.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit_observation.setText(QCoreApplication.translate("MainWindow", u"Edit observation", None))
        self.actionCheckUpdate.setText(QCoreApplication.translate("MainWindow", u"Check for updates and news", None))
        self.actionClose_project.setText(QCoreApplication.translate("MainWindow", u"Close project", None))
        self.actionObservationsList.setText(QCoreApplication.translate("MainWindow", u"Observations list", None))
#if QT_CONFIG(shortcut)
        self.actionObservationsList.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionNormalSpeed.setText(QCoreApplication.translate("MainWindow", u"Normal speed", None))
        self.actionSnapshot.setText(QCoreApplication.translate("MainWindow", u"Snapshot", None))
        self.actionFrame_by_frame.setText(QCoreApplication.translate("MainWindow", u"Frame by frame", None))
        self.actionAggregatedEventsTabularFormat.setText(QCoreApplication.translate("MainWindow", u"Tab Separated Values (tsv)", None))
        self.actionOpen_observation.setText(QCoreApplication.translate("MainWindow", u"Start observation", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_observation.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionAaaa.setText(QCoreApplication.translate("MainWindow", u"aaaa", None))
        self.menuCreate_subtitles_2.setText(QCoreApplication.translate("MainWindow", u"Create subtitles", None))
        self.actionUser_guide.setText(QCoreApplication.translate("MainWindow", u"User guide", None))
        self.actionEdit_observation_2.setText(QCoreApplication.translate("MainWindow", u"Edit observation", None))
#if QT_CONFIG(shortcut)
        self.actionEdit_observation_2.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionCheckStateEvents.setText(QCoreApplication.translate("MainWindow", u"Check state events", None))
        self.actionRunEventOutside.setText(QCoreApplication.translate("MainWindow", u"Run external program with selected event(s)", None))
        self.actionEdit_selected_events.setText(QCoreApplication.translate("MainWindow", u"Edit selected event(s)", None))
        self.actionShow_spectrogram.setText(QCoreApplication.translate("MainWindow", u"Show the sound spectrogram", None))
        self.actionExport_events_as_Praat_TextGrid.setText(QCoreApplication.translate("MainWindow", u"as Praat TextGrid", None))
        self.actionExtract_events_from_media_files.setText(QCoreApplication.translate("MainWindow", u"Extract sequences from media files", None))
        self.action_geometric_measurements.setText(QCoreApplication.translate("MainWindow", u"Geometric measurement", None))
        self.actionFrame_forward.setText(QCoreApplication.translate("MainWindow", u"Frame forward", None))
        self.actionFrame_backward.setText(QCoreApplication.translate("MainWindow", u"frame backward", None))
        self.actionFilterBehaviors.setText(QCoreApplication.translate("MainWindow", u"Filter behaviors", None))
        self.actionShowAllBehaviors.setText(QCoreApplication.translate("MainWindow", u"Show all behaviors", None))
#if QT_CONFIG(tooltip)
        self.actionShowAllBehaviors.setToolTip(QCoreApplication.translate("MainWindow", u"Show all behaviors", None))
#endif // QT_CONFIG(tooltip)
        self.actionExport_aggregated_events.setText(QCoreApplication.translate("MainWindow", u"Aggregated events", None))
        self.actionCoding_pad.setText(QCoreApplication.translate("MainWindow", u"Coding pad", None))
        self.actionTime_budget_by_behaviors_category.setText(QCoreApplication.translate("MainWindow", u"Time budget by behavioral category", None))
        self.actionExport_events_as_SDIS_file.setText(QCoreApplication.translate("MainWindow", u"Export events as SDIS file", None))
        self.actionRecode_resize_video.setText(QCoreApplication.translate("MainWindow", u"Re-encode/resize video", None))
        self.actionMedia_file_information_2.setText(QCoreApplication.translate("MainWindow", u"Media file information", None))
        self.actionCreate_transitions_flow_diagram.setText(QCoreApplication.translate("MainWindow", u"Create transitions DOT script", None))
        self.actionCreate_transitions_flow_diagram_2.setText(QCoreApplication.translate("MainWindow", u"Create transitions flow diagram", None))
        self.actionAll_transitions.setText(QCoreApplication.translate("MainWindow", u"Frequencies of transitions", None))
        self.actionNumber_of_transitions.setText(QCoreApplication.translate("MainWindow", u"Number of transitions", None))
        self.actionFrequencies_of_transitions_after_behaviors.setText(QCoreApplication.translate("MainWindow", u"Frequencies of transitions after behaviors", None))
        self.actionFind_replace_events.setText(QCoreApplication.translate("MainWindow", u"Find/replace in events", None))
        self.actionFind_events.setText(QCoreApplication.translate("MainWindow", u"Find in events", None))
#if QT_CONFIG(tooltip)
        self.actionFind_events.setToolTip(QCoreApplication.translate("MainWindow", u"Find", None))
#endif // QT_CONFIG(tooltip)
        self.actionHow_to_cite_BORIS.setText(QCoreApplication.translate("MainWindow", u"How to cite BORIS", None))
        self.actionZoom1_1_1.setText(QCoreApplication.translate("MainWindow", u"1:1 Original", None))
        self.actionZoom1_2_1.setText(QCoreApplication.translate("MainWindow", u"2:1 Double", None))
        self.actionZoom1_1_2.setText(QCoreApplication.translate("MainWindow", u"1:2 Half", None))
        self.actionZoom1_1_4.setText(QCoreApplication.translate("MainWindow", u"1:4 Quarter", None))
        self.actionZoom1_fitwindow.setText(QCoreApplication.translate("MainWindow", u"Fit to window", None))
        self.actionZoom2_fitwindow.setText(QCoreApplication.translate("MainWindow", u"Fit to window", None))
        self.actionZoom2_1_4.setText(QCoreApplication.translate("MainWindow", u"1:4 Quarter", None))
        self.actionZoom2_1_2.setText(QCoreApplication.translate("MainWindow", u"1:2 Half", None))
        self.actionZoom2_1_1.setText(QCoreApplication.translate("MainWindow", u"1:1 Original", None))
        self.actionZoom2_2_1.setText(QCoreApplication.translate("MainWindow", u"2:1 Double", None))
        self.actionFilterSubjects.setText(QCoreApplication.translate("MainWindow", u"Filter subjects", None))
#if QT_CONFIG(tooltip)
        self.actionFilterSubjects.setToolTip(QCoreApplication.translate("MainWindow", u"Filter subjects", None))
#endif // QT_CONFIG(tooltip)
        self.actionShowAllSubjects.setText(QCoreApplication.translate("MainWindow", u"Show all subjects", None))
#if QT_CONFIG(tooltip)
        self.actionShowAllSubjects.setToolTip(QCoreApplication.translate("MainWindow", u"Show all subjects", None))
#endif // QT_CONFIG(tooltip)
        self.actionSend_project.setText(QCoreApplication.translate("MainWindow", u"Project server", None))
        self.actionViewBehavior.setText(QCoreApplication.translate("MainWindow", u"View behavior", None))
#if QT_CONFIG(tooltip)
        self.actionViewBehavior.setToolTip(QCoreApplication.translate("MainWindow", u"View behavior", None))
#endif // QT_CONFIG(tooltip)
        self.actionBehaviors_coding_map.setText(QCoreApplication.translate("MainWindow", u"Behaviors coding map", None))
        self.action_create_behaviors_coding_map.setText(QCoreApplication.translate("MainWindow", u"for behaviors", None))
        self.action_create_modifiers_coding_map.setText(QCoreApplication.translate("MainWindow", u"for modifiers", None))
        self.actionPlot_events1.setText(QCoreApplication.translate("MainWindow", u"Plot events (back compatibility)", None))
        self.actionPlot_events2.setText(QCoreApplication.translate("MainWindow", u"Plot events", None))
        self.actionCohen_s_kappa.setText(QCoreApplication.translate("MainWindow", u"Cohen's kappa (time-unit)", None))
        self.actionTime_budget_report.setText(QCoreApplication.translate("MainWindow", u"Synthetic time budget", None))
        self.actionCheckStateEventsSingleObs.setText(QCoreApplication.translate("MainWindow", u"Check state events", None))
        self.actionSubjects_pad.setText(QCoreApplication.translate("MainWindow", u"Subjects pad", None))
        self.actionShow_data_files.setText(QCoreApplication.translate("MainWindow", u"Show data files", None))
        self.actionConverters_manager.setText(QCoreApplication.translate("MainWindow", u"Time converters manager", None))
        self.actionView_observation.setText(QCoreApplication.translate("MainWindow", u"View observation", None))
        self.actionRemove_path_from_media_files.setText(QCoreApplication.translate("MainWindow", u"Remove paths", None))
        self.actionCheck_project.setText(QCoreApplication.translate("MainWindow", u"Check project integrity", None))
        self.actionBehavior_bar_plot.setText(QCoreApplication.translate("MainWindow", u"Plot time budget", None))
        self.action_obs_list.setText(QCoreApplication.translate("MainWindow", u"Obs list", None))
#if QT_CONFIG(tooltip)
        self.action_obs_list.setToolTip(QCoreApplication.translate("MainWindow", u"Observations list", None))
#endif // QT_CONFIG(tooltip)
        self.actionTest.setText(QCoreApplication.translate("MainWindow", u"test", None))
        self.actionTest_stb2.setText(QCoreApplication.translate("MainWindow", u"test stb2", None))
        self.actionClose_unpaired_events.setText(QCoreApplication.translate("MainWindow", u"Fix unpaired events", None))
#if QT_CONFIG(shortcut)
        self.actionClose_unpaired_events.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+U", None))
#endif // QT_CONFIG(shortcut)
        self.actionRotate_video.setText(QCoreApplication.translate("MainWindow", u"Rotate video", None))
        self.actionExport_observations_list.setText(QCoreApplication.translate("MainWindow", u"Export observations list", None))
        self.actionExportEvents_2.setText(QCoreApplication.translate("MainWindow", u"Tabular events", None))
        self.actionJWatcher.setText(QCoreApplication.translate("MainWindow", u"for analysis with JWatcher", None))
        self.actionCloseObs.setText(QCoreApplication.translate("MainWindow", u"Close observation", None))
        self.actionFilter_events.setText(QCoreApplication.translate("MainWindow", u"Filter events", None))
        self.actionShow_all_events.setText(QCoreApplication.translate("MainWindow", u"Show all events", None))
#if QT_CONFIG(tooltip)
        self.actionShow_all_events.setToolTip(QCoreApplication.translate("MainWindow", u"Show all events", None))
#endif // QT_CONFIG(tooltip)
        self.actionEdit_event_time.setText(QCoreApplication.translate("MainWindow", u"Shift time of selected event(s)", None))
        self.actionCopy_events.setText(QCoreApplication.translate("MainWindow", u"Copy events", None))
        self.actionPaste_events.setText(QCoreApplication.translate("MainWindow", u"Paste events", None))
        self.actionNoldus_Observer_template.setText(QCoreApplication.translate("MainWindow", u"Noldus The Observer XT (OTX, OTB, ODX)", None))
        self.actionExplore_project.setText(QCoreApplication.translate("MainWindow", u"Explore project", None))
        self.actionShow_the_sound_waveform.setText(QCoreApplication.translate("MainWindow", u"Show the sound waveform", None))
        self.actionNeedleman_Wunsch.setText(QCoreApplication.translate("MainWindow", u"Needleman - Wunsch", None))
        self.actionExtract_frames_from_media_files.setText(QCoreApplication.translate("MainWindow", u"Extract frames from media files", None))
        self.action_behavior_binary_table.setText(QCoreApplication.translate("MainWindow", u"as behaviors binary table", None))
        self.actionPlot_current_observation.setText(QCoreApplication.translate("MainWindow", u"Plot current observation", None))
        self.actionFind_in_current_obs.setText(QCoreApplication.translate("MainWindow", u"Find in events", None))
        self.action_advanced_event_filtering.setText(QCoreApplication.translate("MainWindow", u"Advanced event filtering", None))
        self.action_block_dockwidgets.setText(QCoreApplication.translate("MainWindow", u"Lock dockwidgets", None))
        self.actionseparated_subjects.setText(QCoreApplication.translate("MainWindow", u"separated subjects", None))
        self.actiongrouped_subjects.setText(QCoreApplication.translate("MainWindow", u"grouped subjects", None))
        self.actionCurrent_Time_Budget.setText(QCoreApplication.translate("MainWindow", u"Current Time Budget", None))
        self.actionSynthetic_binned_time_budget.setText(QCoreApplication.translate("MainWindow", u"Synthetic time budget with time bin", None))
        self.actionZoom_level.setText(QCoreApplication.translate("MainWindow", u"Zoom level", None))
        self.actionDisplay_subtitles.setText(QCoreApplication.translate("MainWindow", u"Display subtitles", None))
        self.actionAdd_image_overlay_on_video.setText(QCoreApplication.translate("MainWindow", u"Add", None))
        self.actionRemove_image_overlay.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
        self.actionPlot_events_in_real_time.setText(QCoreApplication.translate("MainWindow", u"Plot events in real time", None))
        self.actionVideo_equalizer.setText(QCoreApplication.translate("MainWindow", u"Video equalizer", None))
        self.actionRemove_observations.setText(QCoreApplication.translate("MainWindow", u"Remove observations", None))
        self.action_latency.setText(QCoreApplication.translate("MainWindow", u"Latency", None))
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
        self.actionaaa.setText(QCoreApplication.translate("MainWindow", u"aaa", None))
        self.action_media_file_and_images_directories_relative_path.setText(QCoreApplication.translate("MainWindow", u"for media file and images directories", None))
        self.action_data_files_relative_path.setText(QCoreApplication.translate("MainWindow", u"for data files", None))
        self.action_remove_media_files_and_images_directories_path.setText(QCoreApplication.translate("MainWindow", u"for media file and images directories", None))
        self.action_remove_data_files_path.setText(QCoreApplication.translate("MainWindow", u"for data files", None))
        self.actionPlot_current_time_budget.setText(QCoreApplication.translate("MainWindow", u"Plot current time budget", None))
        self.actionMerge_media_files.setText(QCoreApplication.translate("MainWindow", u"Merge media files", None))
        self.actionExport_project.setText(QCoreApplication.translate("MainWindow", u"Export project", None))
        self.actionConfigure_twEvents_columns.setText(QCoreApplication.translate("MainWindow", u"Configure columns", None))
        self.actionRotate_current_video.setText(QCoreApplication.translate("MainWindow", u"Rotate video", None))
        self.action_deinterlace.setText(QCoreApplication.translate("MainWindow", u"Deinterlace", None))
        self.action_cooccurence.setText(QCoreApplication.translate("MainWindow", u"Co-occurence", None))
        self.action_create_observations.setText(QCoreApplication.translate("MainWindow", u"Create observations", None))
        self.actionConfigure_tvevents_columns.setText(QCoreApplication.translate("MainWindow", u"Configure columns", None))
        self.actionAdd_frame_indexes.setText(QCoreApplication.translate("MainWindow", u"Add frame indexes", None))
        self.action_load_plugins.setText(QCoreApplication.translate("MainWindow", u"Load plugins", None))
        self.actionCreate_video_spectrogram.setText(QCoreApplication.translate("MainWindow", u"Create video spectrogram", None))
        self.action_change_time_offset_of_players.setText(QCoreApplication.translate("MainWindow", u"Change time offset of players", None))
        self.lbLogoBoris.setText("")
        self.lbLogoUnito.setText("")
        self.lb_player_status.setText(QCoreApplication.translate("MainWindow", u"lb_player_status", None))
        self.lb_current_media_time.setText(QCoreApplication.translate("MainWindow", u"lb_current_media_time", None))
        self.lb_video_info.setText(QCoreApplication.translate("MainWindow", u"lb_video_info", None))
        self.lb_zoom_level.setText(QCoreApplication.translate("MainWindow", u"lb_zoom_level", None))
        self.lbFocalSubject.setText(QCoreApplication.translate("MainWindow", u"lbFocalSubject", None))
        self.lbCurrentStates.setText(QCoreApplication.translate("MainWindow", u"lbCurrentStates", None))
        self.pb_live_obs.setText(QCoreApplication.translate("MainWindow", u"PushButton", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"Project", None))
        self.menuRecent_projects.setTitle(QCoreApplication.translate("MainWindow", u"Recent projects", None))
        self.menuImport_project.setTitle(QCoreApplication.translate("MainWindow", u"Import project from...", None))
        self.menuMedia_file_Images_directories.setTitle(QCoreApplication.translate("MainWindow", u"External files", None))
        self.menuSet_paths_relative_to_project_dir.setTitle(QCoreApplication.translate("MainWindow", u"Set paths relative to project dir", None))
        self.menuRemove_paths.setTitle(QCoreApplication.translate("MainWindow", u"Remove paths", None))
        self.menuObservations.setTitle(QCoreApplication.translate("MainWindow", u"Observations", None))
        self.menuCreate_transitions_matrix.setTitle(QCoreApplication.translate("MainWindow", u"Create transitions matrix", None))
        self.menuExport_events.setTitle(QCoreApplication.translate("MainWindow", u"Export events", None))
        self.menuas_behavioural_sequences.setTitle(QCoreApplication.translate("MainWindow", u"as behavioural sequences", None))
        self.menuAnalyze.setTitle(QCoreApplication.translate("MainWindow", u"Analysis", None))
        self.menuPlot_events.setTitle(QCoreApplication.translate("MainWindow", u"Plot", None))
        self.menuInter_rater_reliability.setTitle(QCoreApplication.translate("MainWindow", u"Inter-rater reliability", None))
        self.menuSimilarities.setTitle(QCoreApplication.translate("MainWindow", u"Similarities", None))
        self.menu_plugins.setTitle(QCoreApplication.translate("MainWindow", u"Plugins", None))
        self.menuPlayback.setTitle(QCoreApplication.translate("MainWindow", u"Playback", None))
        self.menuImage_overlay_on_video_2.setTitle(QCoreApplication.translate("MainWindow", u"Image overlay on video", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.menuTransitions_flow_diagram.setTitle(QCoreApplication.translate("MainWindow", u"Transitions flow diagram", None))
        self.menu_coding_map_creator.setTitle(QCoreApplication.translate("MainWindow", u"Create a coding map", None))
        self.menuMedia_file.setTitle(QCoreApplication.translate("MainWindow", u"Media file", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
#if QT_CONFIG(tooltip)
        self.toolBar.setToolTip("")
#endif // QT_CONFIG(tooltip)
        self.dwEthogram.setWindowTitle(QCoreApplication.translate("MainWindow", u"Ethogram", None))
        ___qtablewidgetitem = self.twEthogram.horizontalHeaderItem(0)
        ___qtablewidgetitem.setText(QCoreApplication.translate("MainWindow", u"Key", None));
        ___qtablewidgetitem1 = self.twEthogram.horizontalHeaderItem(1)
        ___qtablewidgetitem1.setText(QCoreApplication.translate("MainWindow", u"Code", None));
        ___qtablewidgetitem2 = self.twEthogram.horizontalHeaderItem(2)
        ___qtablewidgetitem2.setText(QCoreApplication.translate("MainWindow", u"Type", None));
        ___qtablewidgetitem3 = self.twEthogram.horizontalHeaderItem(3)
        ___qtablewidgetitem3.setText(QCoreApplication.translate("MainWindow", u"Description", None));
        ___qtablewidgetitem4 = self.twEthogram.horizontalHeaderItem(4)
        ___qtablewidgetitem4.setText(QCoreApplication.translate("MainWindow", u"Color", None));
        ___qtablewidgetitem5 = self.twEthogram.horizontalHeaderItem(5)
        ___qtablewidgetitem5.setText(QCoreApplication.translate("MainWindow", u"Category", None));
        ___qtablewidgetitem6 = self.twEthogram.horizontalHeaderItem(6)
        ___qtablewidgetitem6.setText(QCoreApplication.translate("MainWindow", u"Modifiers", None));
        ___qtablewidgetitem7 = self.twEthogram.horizontalHeaderItem(7)
        ___qtablewidgetitem7.setText(QCoreApplication.translate("MainWindow", u"Excluded", None));
        self.dwEvents.setWindowTitle(QCoreApplication.translate("MainWindow", u"Events", None))
        self.dwSubjects.setWindowTitle(QCoreApplication.translate("MainWindow", u"Subjects", None))
        ___qtablewidgetitem8 = self.twSubjects.horizontalHeaderItem(0)
        ___qtablewidgetitem8.setText(QCoreApplication.translate("MainWindow", u"Key", None));
        ___qtablewidgetitem9 = self.twSubjects.horizontalHeaderItem(1)
        ___qtablewidgetitem9.setText(QCoreApplication.translate("MainWindow", u"Name", None));
        ___qtablewidgetitem10 = self.twSubjects.horizontalHeaderItem(2)
        ___qtablewidgetitem10.setText(QCoreApplication.translate("MainWindow", u"Description", None));
        ___qtablewidgetitem11 = self.twSubjects.horizontalHeaderItem(3)
        ___qtablewidgetitem11.setText(QCoreApplication.translate("MainWindow", u"Current state(s)", None));
    # retranslateUi

